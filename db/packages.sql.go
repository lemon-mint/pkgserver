// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: packages.sql

package db

import (
	"context"
	"database/sql"
)

const createPackage = `-- name: CreatePackage :exec
INSERT INTO packages (
    pkg_name   ,
    pkg_type   ,
    vcs        ,
    url        ,
    description
) VALUES ($1, $2, $3, $4, $5)
`

type CreatePackageParams struct {
	PkgName     string         `db:"pkg_name" json:"pkg_name"`
	PkgType     Pkgtype        `db:"pkg_type" json:"pkg_type"`
	Vcs         Vcstype        `db:"vcs" json:"vcs"`
	Url         string         `db:"url" json:"url"`
	Description sql.NullString `db:"description" json:"description"`
}

func (q *Queries) CreatePackage(ctx context.Context, arg CreatePackageParams) error {
	_, err := q.db.Exec(ctx, createPackage,
		arg.PkgName,
		arg.PkgType,
		arg.Vcs,
		arg.Url,
		arg.Description,
	)
	return err
}

const getPackageWithID = `-- name: GetPackageWithID :one
SELECT id, pkg_name, pkg_type, vcs, url, description FROM packages
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPackageWithID(ctx context.Context, id int64) (Package, error) {
	row := q.db.QueryRow(ctx, getPackageWithID, id)
	var i Package
	err := row.Scan(
		&i.ID,
		&i.PkgName,
		&i.PkgType,
		&i.Vcs,
		&i.Url,
		&i.Description,
	)
	return i, err
}

const getPackageWithName = `-- name: GetPackageWithName :one
SELECT id, pkg_name, pkg_type, vcs, url, description FROM packages
WHERE pkg_name = $1 LIMIT 1
`

func (q *Queries) GetPackageWithName(ctx context.Context, pkgName string) (Package, error) {
	row := q.db.QueryRow(ctx, getPackageWithName, pkgName)
	var i Package
	err := row.Scan(
		&i.ID,
		&i.PkgName,
		&i.PkgType,
		&i.Vcs,
		&i.Url,
		&i.Description,
	)
	return i, err
}

const searchPackages = `-- name: SearchPackages :many
SELECT id, pkg_name, pkg_type, vcs, url, description FROM packages
WHERE to_tsvector('english', description) @@ to_tsquery('english', $1)
OR pkg_name = $1
`

func (q *Queries) SearchPackages(ctx context.Context, toTsquery string) ([]Package, error) {
	rows, err := q.db.Query(ctx, searchPackages, toTsquery)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Package
	for rows.Next() {
		var i Package
		if err := rows.Scan(
			&i.ID,
			&i.PkgName,
			&i.PkgType,
			&i.Vcs,
			&i.Url,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
